name: Winget Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  winget:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get release info
      id: release_info
      run: |
        $latest_release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest"
        $version = $latest_release.tag_name -replace '^[vV]', ''
        $zipUrl = "https://github.com/${{ github.repository }}/releases/download/$($latest_release.tag_name)/DLSS.Updater.$version.zip"
        
        # Download ZIP to calculate hash
        Invoke-WebRequest -Uri $zipUrl -OutFile "DLSS.Updater.zip"
        $hash = (Get-FileHash -Path "DLSS.Updater.zip" -Algorithm SHA256).Hash
        
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "URL=$zipUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "HASH=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
    
    - name: Create manifest files
      id: create_manifests
      run: |
        $version = "${{ steps.release_info.outputs.VERSION }}"
        
        # Create directory structure as expected by winget
        $manifestDir = "manifests\r\Recol\DLSSUpdater\$version"
        New-Item -Path $manifestDir -ItemType Directory -Force
        
        # Create version manifest
        $versionContent = "PackageIdentifier: Recol.DLSSUpdater`nPackageVersion: $version`nDefaultLocale: en-US`nManifestType: version`nManifestVersion: 1.6.0"
        
        $versionPath = Join-Path $manifestDir "Recol.DLSSUpdater.yaml"
        $versionContent | Out-File -FilePath $versionPath -Encoding UTF8 -NoNewline
        
        # Create installer manifest with administrative privileges
        $installerContent = "PackageIdentifier: Recol.DLSSUpdater`n"
        $installerContent += "PackageVersion: $version`n"
        $installerContent += "MinimumOSVersion: 10.0.0.0`n"
        $installerContent += "Platform:`n"
        $installerContent += "- Windows.Desktop`n"
        $installerContent += "InstallModes:`n"
        $installerContent += "- interactive`n"
        $installerContent += "- silent`n"
        $installerContent += "Installers:`n"
        $installerContent += "- Architecture: x64`n"
        $installerContent += "  InstallerType: zip`n"
        $installerContent += "  NestedInstallerType: portable`n"
        $installerContent += "  NestedInstallerFiles:`n"
        $installerContent += "  - RelativeFilePath: DLSS_Updater\DLSS_Updater.exe`n"
        $installerContent += "    PortableCommandAlias: dlss-updater`n"
        $installerContent += "  InstallerUrl: ${{ steps.release_info.outputs.URL }}`n"
        $installerContent += "  InstallerSha256: ${{ steps.release_info.outputs.HASH }}`n"
        $installerContent += "  UpgradeBehavior: install`n"
        $installerContent += "  AppsAndFeaturesEntries:`n"
        $installerContent += "  - DisplayName: DLSS Updater`n"
        $installerContent += "    Publisher: Recol`n"
        $installerContent += "    ProductCode: DLSSUpdater`n"
        $installerContent += "ManifestType: installer`n"
        $installerContent += "ManifestVersion: 1.6.0"
        
        $installerPath = Join-Path $manifestDir "Recol.DLSSUpdater.installer.yaml"
        $installerContent | Out-File -FilePath $installerPath -Encoding UTF8 -NoNewline
        
        # Create locale manifest with administrative note
        $localeContent = "PackageIdentifier: Recol.DLSSUpdater`n"
        $localeContent += "PackageVersion: $version`n"
        $localeContent += "PackageLocale: en-US`n"
        $localeContent += "Publisher: Recol`n"
        $localeContent += "PublisherUrl: https://github.com/Recol`n"
        $localeContent += "PublisherSupportUrl: https://github.com/Recol/DLSS-Updater/issues`n"
        $localeContent += "Author: Deco`n"
        $localeContent += "PackageName: DLSS Updater`n"
        $localeContent += "PackageUrl: https://github.com/Recol/DLSS-Updater`n"
        $localeContent += "License: AGPL-3.0`n"
        $localeContent += "LicenseUrl: https://github.com/Recol/DLSS-Updater/blob/main/LICENSE`n"
        $localeContent += "ShortDescription: A tool to update DLSS/XeSS DLLs for various games`n"
        $localeContent += "Description: |`n"
        $localeContent += "  DLSS Updater is a utility that automatically updates DLSS (Deep Learning Super Sampling), XeSS (Intel Xe Super Sampling), and DirectStorage DLLs for games across multiple platforms including Steam, EA Play, Ubisoft, Epic Games, GOG, and Battle.net.`n"
        $localeContent += "  `n"
        $localeContent += "  Note: This application requires administrative privileges to run.`n"
        $localeContent += "Tags:`n"
        $localeContent += "- dlss`n"
        $localeContent += "- nvidia`n"
        $localeContent += "- gaming`n"
        $localeContent += "- xess`n"
        $localeContent += "- directstorage`n"
        $localeContent += "- game-optimization`n"
        $localeContent += "ReleaseNotes: https://github.com/Recol/DLSS-Updater/releases/tag/v$version`n"
        $localeContent += "ReleaseNotesUrl: https://github.com/Recol/DLSS-Updater/releases/tag/v$version`n"
        $localeContent += "ManifestType: defaultLocale`n"
        $localeContent += "ManifestVersion: 1.6.0"
        
        $localePath = Join-Path $manifestDir "Recol.DLSSUpdater.locale.en-US.yaml"
        $localeContent | Out-File -FilePath $localePath -Encoding UTF8 -NoNewline
        
        # List contents to verify
        Write-Host "Created manifest files:"
        Get-ChildItem $manifestDir -Recurse
        
        # Output the base manifest directory for next step
        echo "MANIFEST_DIR=manifests\r\Recol\DLSSUpdater\$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
    
    - name: Install GitHub CLI
      run: |
        # Install GitHub CLI for PR management
        Invoke-WebRequest -Uri "https://github.com/cli/cli/releases/latest/download/gh_2.46.0_windows_amd64.msi" -OutFile "gh.msi"
        Start-Process msiexec.exe -Wait -ArgumentList '/I gh.msi /quiet'
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
      shell: pwsh
    
    - name: Update existing PR
      run: |
        # Download wingetcreate for submission
        Invoke-WebRequest -Uri "https://github.com/microsoft/winget-create/releases/latest/download/wingetcreate.exe" -OutFile "wingetcreate.exe"
        
        # First, check if we have an existing PR for this package
        $existingPRs = gh pr list --repo microsoft/winget-pkgs --search "Recol.DLSSUpdater" --state open --json number,title
        $ourPR = $existingPRs | ConvertFrom-Json | Where-Object { $_.title -like "*Recol.DLSSUpdater*" } | Select-Object -First 1
        
        if ($ourPR) {
          Write-Host "Found existing PR #$($ourPR.number), updating it..."
          # Update the existing PR
          .\wingetcreate.exe update "Recol.DLSSUpdater" `
            --version "${{ steps.release_info.outputs.VERSION }}" `
            --urls "${{ steps.release_info.outputs.URL }}" `
            --submit `
            --replace `
            --prNumber $ourPR.number `
            --token "${{ secrets.WINGET_TOKEN }}"
        } else {
          Write-Host "No existing PR found, creating new one..."
          # Submit new PR with the manifest directory
          .\wingetcreate.exe submit "${{ steps.create_manifests.outputs.MANIFEST_DIR }}" `
            --token "${{ secrets.WINGET_TOKEN }}"
        }
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
