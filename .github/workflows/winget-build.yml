name: Winget Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  winget:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Get release info
      id: release_info
      run: |
        $latest_release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest"
        $version = $latest_release.tag_name -replace '^[vV]', ''
        $zipUrl = "https://github.com/${{ github.repository }}/releases/download/$($latest_release.tag_name)/DLSS.Updater.$version.zip"
        
        # Download ZIP to calculate hash
        Invoke-WebRequest -Uri $zipUrl -OutFile "DLSS.Updater.zip"
        $hash = (Get-FileHash -Path "DLSS.Updater.zip" -Algorithm SHA256).Hash
        
        # Extract ZIP to check actual structure
        Expand-Archive -Path "DLSS.Updater.zip" -DestinationPath "extracted" -Force
        Write-Host "Extracted contents:"
        Get-ChildItem -Path "extracted" -Recurse | ForEach-Object { Write-Host $_.FullName }
        
        # Find the actual path to DLSS_Updater.exe
        $exePath = Get-ChildItem -Path "extracted" -Filter "DLSS_Updater.exe" -Recurse | Select-Object -First 1
        if ($exePath) {
            $relativePath = $exePath.FullName.Replace("$PWD\extracted\", "").Replace("\", "/")
            Write-Host "Found exe at: $relativePath"
            echo "RELATIVE_EXE_PATH=$relativePath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
            Write-Error "DLSS_Updater.exe not found in ZIP"
            exit 1
        }
        
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "URL=$zipUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "HASH=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "TAG_NAME=$($latest_release.tag_name)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
      
    - name: Build manifest files
      id: build_manifests
      run: |
        $version = "${{ steps.release_info.outputs.VERSION }}"
        $exePath = "${{ steps.release_info.outputs.RELATIVE_EXE_PATH }}"
        $zipUrl = "${{ steps.release_info.outputs.URL }}"
        $hash = "${{ steps.release_info.outputs.HASH }}"
        $tagName = "${{ steps.release_info.outputs.TAG_NAME }}"
        
        # Create manifest directory
        $manifestDir = "manifests/r/Recol/DLSSUpdater/$version"
        New-Item -Path $manifestDir -ItemType Directory -Force
        
        # Create version manifest
        $versionContent = "PackageIdentifier: Recol.DLSSUpdater`r`n"
        $versionContent += "PackageVersion: $version`r`n"
        $versionContent += "DefaultLocale: en-US`r`n"
        $versionContent += "ManifestType: version`r`n"
        $versionContent += "ManifestVersion: 1.6.0"
        
        $versionPath = Join-Path $manifestDir "Recol.DLSSUpdater.yaml"
        Set-Content -Path $versionPath -Value $versionContent -NoNewline
        
        # Create installer manifest
        $installerContent = "PackageIdentifier: Recol.DLSSUpdater`r`n"
        $installerContent += "PackageVersion: $version`r`n"
        $installerContent += "MinimumOSVersion: 10.0.0.0`r`n"
        $installerContent += "Platform:`r`n"
        $installerContent += "- Windows.Desktop`r`n"
        $installerContent += "InstallModes:`r`n"
        $installerContent += "- interactive`r`n"
        $installerContent += "- silent`r`n"
        $installerContent += "Installers:`r`n"
        $installerContent += "- Architecture: x64`r`n"
        $installerContent += "  InstallerType: zip`r`n"
        $installerContent += "  InstallerUrl: $zipUrl`r`n"
        $installerContent += "  InstallerSha256: $hash`r`n"
        $installerContent += "  NestedInstallerType: portable`r`n"
        $installerContent += "  NestedInstallerFiles:`r`n"
        $installerContent += "  - RelativeFilePath: $exePath`r`n"
        $installerContent += "    PortableCommandAlias: dlss-updater`r`n"
        $installerContent += "  UpgradeBehavior: install`r`n"
        $installerContent += "ManifestType: installer`r`n"
        $installerContent += "ManifestVersion: 1.6.0"
        
        $installerPath = Join-Path $manifestDir "Recol.DLSSUpdater.installer.yaml"
        Set-Content -Path $installerPath -Value $installerContent -NoNewline
        
        # Create locale manifest
        $localeContent = "PackageIdentifier: Recol.DLSSUpdater`r`n"
        $localeContent += "PackageVersion: $version`r`n"
        $localeContent += "PackageLocale: en-US`r`n"
        $localeContent += "Publisher: Recol`r`n"
        $localeContent += "PublisherUrl: https://github.com/Recol`r`n"
        $localeContent += "PublisherSupportUrl: https://github.com/Recol/DLSS-Updater/issues`r`n"
        $localeContent += "Author: Deco`r`n"
        $localeContent += "PackageName: DLSS Updater`r`n"
        $localeContent += "PackageUrl: https://github.com/Recol/DLSS-Updater`r`n"
        $localeContent += "License: AGPL-3.0`r`n"
        $localeContent += "LicenseUrl: https://github.com/Recol/DLSS-Updater/blob/main/LICENSE`r`n"
        $localeContent += "ShortDescription: A tool to update DLSS, XeSS, and DirectStorage DLLs for various games`r`n"
        $localeContent += "Description: |`r`n"
        $localeContent += "  DLSS Updater is a utility that automatically updates DLSS (Deep Learning Super Sampling), XeSS (Intel Xe Super Sampling), and DirectStorage DLLs for games across multiple platforms.`r`n"
        $localeContent += "  `r`n"
        $localeContent += "  Note: This application requires administrative privileges to modify game files.`r`n"
        $localeContent += "Tags:`r`n"
        $localeContent += "- dlss`r`n"
        $localeContent += "- nvidia`r`n"
        $localeContent += "- gaming`r`n"
        $localeContent += "- xess`r`n"
        $localeContent += "- directstorage`r`n"
        $localeContent += "ReleaseNotes: https://github.com/Recol/DLSS-Updater/releases/tag/$tagName`r`n"
        $localeContent += "ReleaseNotesUrl: https://github.com/Recol/DLSS-Updater/releases/tag/$tagName`r`n"
        $localeContent += "ManifestType: defaultLocale`r`n"
        $localeContent += "ManifestVersion: 1.6.0"
        
        $localePath = Join-Path $manifestDir "Recol.DLSSUpdater.locale.en-US.yaml"
        Set-Content -Path $localePath -Value $localeContent -NoNewline
        
        # Save the manifest directory path for later steps
        echo "MANIFEST_DIR=$manifestDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
    
    - name: Check for existing PR
      id: check_pr
      run: |
        $headers = @{
            "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            "Accept" = "application/vnd.github.v3+json"
        }
        
        # Search for PRs
        $searchUrl = "https://api.github.com/search/issues?q=repo:microsoft/winget-pkgs+is:pr+is:open+Recol.DLSSUpdater"
        Write-Host "Searching for PRs at: $searchUrl"
        
        try {
            $response = Invoke-RestMethod -Uri $searchUrl -Headers $headers -Method Get
            Write-Host "Search response count: $($response.total_count)"
            
            if ($response.total_count -gt 0) {
                $pr = $response.items | Select-Object -First 1
                Write-Host "Found PR #$($pr.number): $($pr.title)"
                echo "PR_NUMBER=$($pr.number)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                echo "HAS_PR=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                
                # Get the PR details to find the branch name
                $prDetailsUrl = "https://api.github.com/repos/microsoft/winget-pkgs/pulls/$($pr.number)"
                $prDetails = Invoke-RestMethod -Uri $prDetailsUrl -Headers $headers -Method Get
                $branchName = $prDetails.head.ref
                echo "PR_BRANCH=$branchName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            } else {
                Write-Host "No existing PR found"
                echo "HAS_PR=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            }
        } catch {
            Write-Host "Error searching for PRs: $_"
            echo "HAS_PR=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }
      shell: pwsh
    
    - name: Update existing PR
      if: steps.check_pr.outputs.HAS_PR == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $version = "${{ steps.release_info.outputs.VERSION }}"
        $manifestDir = "${{ steps.build_manifests.outputs.MANIFEST_DIR }}"
        $prBranch = "${{ steps.check_pr.outputs.PR_BRANCH }}"
        
        # Configure git
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
        # Clone the fork and checkout the PR branch
        git clone https://github.com/vedantmgoyal9/winget-pkgs.git winget-pkgs
        cd winget-pkgs
        git checkout $prBranch
        
        # Create directory structure for the package version
        $repoManifestDir = "manifests/r/Recol/DLSSUpdater/$version"
        New-Item -Path $repoManifestDir -ItemType Directory -Force
        
        # Copy manifest files from the build step
        Copy-Item -Path "../$manifestDir/*" -Destination $repoManifestDir -Recurse
        
        # Commit and push changes
        git add .
        git commit -m "Update Recol.DLSSUpdater to version $version"
        git push origin $prBranch
      shell: pwsh
    
    - name: Create new PR
      if: steps.check_pr.outputs.HAS_PR == 'false'
      run: |
        $manifestDir = "${{ steps.build_manifests.outputs.MANIFEST_DIR }}"
        
        # Download wingetcreate
        $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/microsoft/winget-create/releases/latest"
        $asset = $latestRelease.assets | Where-Object { $_.name -eq "wingetcreate.exe" } | Select-Object -First 1
        Invoke-WebRequest -Uri $asset.browser_download_url -OutFile "wingetcreate.exe"
        
        # Submit the manifest using wingetcreate
        .\wingetcreate.exe submit $manifestDir --token "${{ secrets.WINGET_TOKEN }}"
      shell: pwsh
