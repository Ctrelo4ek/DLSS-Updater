name: Winget Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  winget:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get release info
      id: release_info
      run: |
        $latest_release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest"
        $version = $latest_release.tag_name -replace '^[vV]', ''
        $zipUrl = "https://github.com/${{ github.repository }}/releases/download/$($latest_release.tag_name)/DLSS.Updater.$version.zip"
        
        # Download ZIP to calculate hash
        Invoke-WebRequest -Uri $zipUrl -OutFile "DLSS.Updater.zip"
        $hash = (Get-FileHash -Path "DLSS.Updater.zip" -Algorithm SHA256).Hash
        
        # Extract ZIP to check actual structure
        Expand-Archive -Path "DLSS.Updater.zip" -DestinationPath "extracted" -Force
        Write-Host "Extracted contents:"
        Get-ChildItem -Path "extracted" -Recurse | ForEach-Object { Write-Host $_.FullName }
        
        # Find the actual path to DLSS_Updater.exe
        $exePath = Get-ChildItem -Path "extracted" -Filter "DLSS_Updater.exe" -Recurse | Select-Object -First 1
        if ($exePath) {
            $relativePath = $exePath.FullName.Replace("$PWD\extracted\", "").Replace("\", "/")
            Write-Host "Found exe at: $relativePath"
            echo "RELATIVE_EXE_PATH=$relativePath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
            Write-Error "DLSS_Updater.exe not found in ZIP"
            exit 1
        }
        
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "URL=$zipUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "HASH=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
    
    - name: Submit to Winget
      run: |
        # Download wingetcreate
        $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/microsoft/winget-create/releases/latest"
        $asset = $latestRelease.assets | Where-Object { $_.name -eq "wingetcreate.exe" } | Select-Object -First 1
        Invoke-WebRequest -Uri $asset.browser_download_url -OutFile "wingetcreate.exe"
        
        Write-Host "Submitting version ${{ steps.release_info.outputs.VERSION }}"
        
        # Use update with --submit, which will handle existing PRs automatically
        .\wingetcreate.exe update `
            Recol.DLSSUpdater `
            --version "${{ steps.release_info.outputs.VERSION }}" `
            --urls "${{ steps.release_info.outputs.URL }}" `
            --interactive false `
            --token "${{ secrets.WINGET_TOKEN }}" `
            --submit
      shell: pwsh
