name: Winget Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  winget:
    runs-on: windows-latest
    
    steps:
    - name: Get release info
      id: release_info
      run: |
        $latest_release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest"
        $version = $latest_release.tag_name -replace '^[vV]', ''
        
        # Match the actual ZIP file naming format
        $zipUrl = "https://github.com/${{ github.repository }}/releases/download/$($latest_release.tag_name)/DLSS.Updater.$version.zip"
        
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "URL=$zipUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
    
    - name: Download and Install WingetCreate
      run: |
        # Download the MSI installer instead
        $installerUrl = "https://github.com/microsoft/winget-create/releases/latest/download/wingetcreate.msixbundle"
        
        # Download installer
        Invoke-WebRequest -Uri $installerUrl -OutFile "wingetcreate.msixbundle"
        
        # Install using Add-AppxPackage
        Add-AppxPackage -Path ".\wingetcreate.msixbundle"
        
        # Find the installed location
        $package = Get-AppxPackage -Name "Microsoft.WindowsPackageManagerManifestCreator"
        $wingetCreatePath = Join-Path $package.InstallLocation "wingetcreate.exe"
        
        # Verify it exists
        if (Test-Path $wingetCreatePath) {
          Write-Host "Found wingetcreate at: $wingetCreatePath"
          & $wingetCreatePath version
        } else {
          Write-Error "Could not find wingetcreate.exe after installation"
          exit 1
        }
      shell: pwsh
    
    - name: Update Winget Package
      run: |
        # Use wingetcreate directly (now in PATH)
        wingetcreate update `
          --id Recol.DLSSUpdater `
          --name "DLSS Updater" `
          --version "${{ steps.release_info.outputs.VERSION }}" `
          --urls "${{ steps.release_info.outputs.URL }}" `
          --publisher "Recol" `
          --license "GNU Affero General Public License v3.0" `
          --license-url "https://github.com/Recol/DLSS-Updater/blob/main/LICENSE" `
          --description "A tool to update DLSS, XeSS, and DirectStorage DLLs for various games and launchers" `
          --home-page "https://github.com/Recol/DLSS-Updater" `
          --support-url "https://github.com/Recol/DLSS-Updater/issues" `
          --moniker "dlss-updater" `
          --tags "dlss,nvidia,gaming,update-tool,xess,directstorage" `
          --installer-type "zip" `
          --architecture "x64" `
          --scope "machine" `
          --silent-switch "/S" `
          --interactive-switch "/I" `
          --submit `
          --token "${{ secrets.WINGET_TOKEN }}"
      shell: pwsh
