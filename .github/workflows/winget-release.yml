name: Winget Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  winget:
    runs-on: windows-latest
    
    steps:
    - name: Get release info
      id: release_info
      run: |
        $latest_release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest"
        $version = $latest_release.tag_name -replace '^[vV]', ''
        
        # Match the actual ZIP file naming format
        $zipUrl = "https://github.com/${{ github.repository }}/releases/download/$($latest_release.tag_name)/DLSS.Updater.$version.zip"
        
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "URL=$zipUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
    
    - name: Install WingetCreate
      run: |
        # Install using the official installer
        Invoke-WebRequest -Uri "https://github.com/microsoft/winget-create/releases/latest/download/wingetcreate-self-contained.exe" -OutFile "wingetcreate.exe"
        
        # Verify download
        if (Test-Path ".\wingetcreate.exe") {
          $fileInfo = Get-Item ".\wingetcreate.exe"
          Write-Host "Downloaded wingetcreate.exe: $($fileInfo.Length) bytes"
          
          # Test execution
          .\wingetcreate.exe version
        }
        else {
          Write-Error "Failed to download wingetcreate.exe"
          exit 1
        }
      shell: pwsh
    
    - name: Update Winget Package
      run: |
        .\wingetcreate.exe update `
          Recol.DLSSUpdater `
          --version "${{ steps.release_info.outputs.VERSION }}" `
          --urls "${{ steps.release_info.outputs.URL }}" `
          --submit `
          --token "${{ secrets.WINGET_TOKEN }}"
      shell: pwsh
