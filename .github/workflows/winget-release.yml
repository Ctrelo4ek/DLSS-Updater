name: Winget Release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  winget:
    runs-on: windows-latest
    
    steps:
    - name: Get release info
      id: release_info
      run: |
        $latest_release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest"
        $version = $latest_release.tag_name -replace '^[vV]', ''
        
        # Match the actual ZIP file naming format
        $zipUrl = "https://github.com/${{ github.repository }}/releases/download/$($latest_release.tag_name)/DLSS.Updater.$version.zip"
        
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "URL=$zipUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "TAG=$($latest_release.tag_name)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Install and run WingetCreate
      run: |
        # Install wingetcreate as a global tool
        dotnet tool install -g Microsoft.WingetCreate
        
        # Get the actual path to the tool
        $toolPath = "$env:USERPROFILE\.dotnet\tools"
        $wingetCreatePath = Join-Path $toolPath "wingetcreate.exe"
        
        Write-Host "Tool path: $toolPath"
        Write-Host "WingetCreate path: $wingetCreatePath"
        
        # Verify it exists
        if (Test-Path $wingetCreatePath) {
          Write-Host "Found wingetcreate at: $wingetCreatePath"
          
          # Run version check
          & $wingetCreatePath version
          
          # Run the update command
          & $wingetCreatePath update `
            --id Recol.DLSSUpdater `
            --name "DLSS Updater" `
            --version "${{ steps.release_info.outputs.VERSION }}" `
            --urls "${{ steps.release_info.outputs.URL }}" `
            --publisher "Recol" `
            --moniker "dlss-updater" `
            --submit `
            --token "${{ secrets.WINGET_TOKEN }}"
        }
        else {
          # Try alternative path
          $altPath = "$env:ProgramData\dotnet\tools\wingetcreate.exe"
          Write-Host "Checking alternative path: $altPath"
          
          if (Test-Path $altPath) {
            & $altPath update `
              --id Recol.DLSSUpdater `
              --name "DLSS Updater" `
              --version "${{ steps.release_info.outputs.VERSION }}" `
              --urls "${{ steps.release_info.outputs.URL }}" `
              --publisher "Recol" `
              --moniker "dlss-updater" `
              --submit `
              --token "${{ secrets.WINGET_TOKEN }}"
          }
          else {
            Write-Error "Could not find wingetcreate.exe in expected locations"
            
            # List all locations to debug
            Write-Host "Checking directories:"
            Get-ChildItem "$env:USERPROFILE\.dotnet" -Recurse -Filter "wingetcreate.exe" | ForEach-Object { $_.FullName }
            Get-ChildItem "$env:ProgramData\dotnet" -Recurse -Filter "wingetcreate.exe" -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName }
            
            exit 1
          }
        }
      shell: pwsh
